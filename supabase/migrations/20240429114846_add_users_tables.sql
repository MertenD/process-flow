create table "public"."profile_role_team" (
                                              "id" bigint generated by default as identity not null,
                                              "created_at" timestamp with time zone not null default now(),
                                              "profile" uuid not null,
                                              "role" bigint not null,
                                              "team" bigint not null
);


alter table "public"."profile_role_team" enable row level security;

create table "public"."profiles" (
                                     "id" uuid not null default gen_random_uuid(),
                                     "username" text not null,
                                     "created_at" timestamp with time zone not null default now(),
                                     "created_by" uuid,
                                     "updated_by" uuid,
                                     "updated_at" timestamp without time zone
);


alter table "public"."profiles" enable row level security;

create table "public"."role" (
                                 "id" bigint generated by default as identity not null,
                                 "created_at" timestamp with time zone not null default now(),
                                 "name" text not null,
                                 "belongs_to" bigint not null
);


alter table "public"."role" enable row level security;

create table "public"."team" (
                                 "id" bigint generated by default as identity not null,
                                 "created_at" timestamp with time zone not null default now(),
                                 "name" character varying not null,
                                 "created_by" uuid not null
);


alter table "public"."team" enable row level security;

CREATE UNIQUE INDEX profile_role_team_pkey ON public.profile_role_team USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX role_pkey ON public.role USING btree (id);

CREATE UNIQUE INDEX team_pkey ON public.team USING btree (id);

alter table "public"."profile_role_team" add constraint "profile_role_team_pkey" PRIMARY KEY using index "profile_role_team_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."role" add constraint "role_pkey" PRIMARY KEY using index "role_pkey";

alter table "public"."team" add constraint "team_pkey" PRIMARY KEY using index "team_pkey";

alter table "public"."profile_role_team" add constraint "public_profile_role_team_profile_fkey" FOREIGN KEY (profile) REFERENCES profiles(id) not valid;

alter table "public"."profile_role_team" validate constraint "public_profile_role_team_profile_fkey";

alter table "public"."profile_role_team" add constraint "public_profile_role_team_role_fkey" FOREIGN KEY (role) REFERENCES role(id) not valid;

alter table "public"."profile_role_team" validate constraint "public_profile_role_team_role_fkey";

alter table "public"."profile_role_team" add constraint "public_profile_role_team_team_fkey" FOREIGN KEY (team) REFERENCES team(id) not valid;

alter table "public"."profile_role_team" validate constraint "public_profile_role_team_team_fkey";

alter table "public"."profiles" add constraint "public_profiles_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) not valid;

alter table "public"."profiles" validate constraint "public_profiles_created_by_fkey";

alter table "public"."profiles" add constraint "public_profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."profiles" validate constraint "public_profiles_id_fkey";

alter table "public"."profiles" add constraint "public_profiles_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES profiles(id) not valid;

alter table "public"."profiles" validate constraint "public_profiles_updated_by_fkey";

alter table "public"."role" add constraint "public_role_belongs_to_fkey" FOREIGN KEY (belongs_to) REFERENCES team(id) ON UPDATE CASCADE not valid;

alter table "public"."role" validate constraint "public_role_belongs_to_fkey";

alter table "public"."team" add constraint "public_team_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON UPDATE CASCADE not valid;

alter table "public"."team" validate constraint "public_team_created_by_fkey";

grant delete on table "public"."profile_role_team" to "anon";

grant insert on table "public"."profile_role_team" to "anon";

grant references on table "public"."profile_role_team" to "anon";

grant select on table "public"."profile_role_team" to "anon";

grant trigger on table "public"."profile_role_team" to "anon";

grant truncate on table "public"."profile_role_team" to "anon";

grant update on table "public"."profile_role_team" to "anon";

grant delete on table "public"."profile_role_team" to "authenticated";

grant insert on table "public"."profile_role_team" to "authenticated";

grant references on table "public"."profile_role_team" to "authenticated";

grant select on table "public"."profile_role_team" to "authenticated";

grant trigger on table "public"."profile_role_team" to "authenticated";

grant truncate on table "public"."profile_role_team" to "authenticated";

grant update on table "public"."profile_role_team" to "authenticated";

grant delete on table "public"."profile_role_team" to "service_role";

grant insert on table "public"."profile_role_team" to "service_role";

grant references on table "public"."profile_role_team" to "service_role";

grant select on table "public"."profile_role_team" to "service_role";

grant trigger on table "public"."profile_role_team" to "service_role";

grant truncate on table "public"."profile_role_team" to "service_role";

grant update on table "public"."profile_role_team" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."role" to "anon";

grant insert on table "public"."role" to "anon";

grant references on table "public"."role" to "anon";

grant select on table "public"."role" to "anon";

grant trigger on table "public"."role" to "anon";

grant truncate on table "public"."role" to "anon";

grant update on table "public"."role" to "anon";

grant delete on table "public"."role" to "authenticated";

grant insert on table "public"."role" to "authenticated";

grant references on table "public"."role" to "authenticated";

grant select on table "public"."role" to "authenticated";

grant trigger on table "public"."role" to "authenticated";

grant truncate on table "public"."role" to "authenticated";

grant update on table "public"."role" to "authenticated";

grant delete on table "public"."role" to "service_role";

grant insert on table "public"."role" to "service_role";

grant references on table "public"."role" to "service_role";

grant select on table "public"."role" to "service_role";

grant trigger on table "public"."role" to "service_role";

grant truncate on table "public"."role" to "service_role";

grant update on table "public"."role" to "service_role";

grant delete on table "public"."team" to "anon";

grant insert on table "public"."team" to "anon";

grant references on table "public"."team" to "anon";

grant select on table "public"."team" to "anon";

grant trigger on table "public"."team" to "anon";

grant truncate on table "public"."team" to "anon";

grant update on table "public"."team" to "anon";

grant delete on table "public"."team" to "authenticated";

grant insert on table "public"."team" to "authenticated";

grant references on table "public"."team" to "authenticated";

grant select on table "public"."team" to "authenticated";

grant trigger on table "public"."team" to "authenticated";

grant truncate on table "public"."team" to "authenticated";

grant update on table "public"."team" to "authenticated";

grant delete on table "public"."team" to "service_role";

grant insert on table "public"."team" to "service_role";

grant references on table "public"."team" to "service_role";

grant select on table "public"."team" to "service_role";

grant trigger on table "public"."team" to "service_role";

grant truncate on table "public"."team" to "service_role";

grant update on table "public"."team" to "service_role";

create policy "Enable insert for authenticated users only"
    on "public"."profiles"
    as permissive
    for insert
    to authenticated
    with check (true);


create policy "Enable read access for all users"
    on "public"."profiles"
    as permissive
    for select
    to public
    using (true);


create policy "Enable update for users profile based on user id"
    on "public"."profiles"
    as permissive
    for update
    to authenticated
    using ((auth.uid() = id))
    with check ((auth.uid() = id));

create policy "Enable read access for all users for the ""role"" table"
    on "public"."role"
    as permissive
    for select
    using (true);
