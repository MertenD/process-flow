create table "public"."teams_node_definitions" (
                                                   "id" bigint generated by default as identity not null,
                                                   "created_at" timestamp with time zone not null default now(),
                                                   "team_id" bigint not null,
                                                   "node_definition_id" bigint
);


alter table "public"."teams_node_definitions" enable row level security;

CREATE UNIQUE INDEX teams_node_definitions_pkey ON public.teams_node_definitions USING btree (id);

alter table "public"."teams_node_definitions" add constraint "teams_node_definitions_pkey" PRIMARY KEY using index "teams_node_definitions_pkey";

alter table "public"."teams_node_definitions" add constraint "public_teams_node_definitions_node_definition_id_fkey" FOREIGN KEY (node_definition_id) REFERENCES node_definition(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."teams_node_definitions" validate constraint "public_teams_node_definitions_node_definition_id_fkey";

alter table "public"."teams_node_definitions" add constraint "public_teams_node_definitions_team_id_fkey" FOREIGN KEY (team_id) REFERENCES team(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."teams_node_definitions" validate constraint "public_teams_node_definitions_team_id_fkey";

grant delete on table "public"."teams_node_definitions" to "anon";

grant insert on table "public"."teams_node_definitions" to "anon";

grant references on table "public"."teams_node_definitions" to "anon";

grant select on table "public"."teams_node_definitions" to "anon";

grant trigger on table "public"."teams_node_definitions" to "anon";

grant truncate on table "public"."teams_node_definitions" to "anon";

grant update on table "public"."teams_node_definitions" to "anon";

grant delete on table "public"."teams_node_definitions" to "authenticated";

grant insert on table "public"."teams_node_definitions" to "authenticated";

grant references on table "public"."teams_node_definitions" to "authenticated";

grant select on table "public"."teams_node_definitions" to "authenticated";

grant trigger on table "public"."teams_node_definitions" to "authenticated";

grant truncate on table "public"."teams_node_definitions" to "authenticated";

grant update on table "public"."teams_node_definitions" to "authenticated";

grant delete on table "public"."teams_node_definitions" to "service_role";

grant insert on table "public"."teams_node_definitions" to "service_role";

grant references on table "public"."teams_node_definitions" to "service_role";

grant select on table "public"."teams_node_definitions" to "service_role";

grant trigger on table "public"."teams_node_definitions" to "service_role";

grant truncate on table "public"."teams_node_definitions" to "service_role";

grant update on table "public"."teams_node_definitions" to "service_role";

create policy "Enable all for authenticaed users"
    on "public"."teams_node_definitions"
    as permissive
    for all
    to authenticated
    using (true);
